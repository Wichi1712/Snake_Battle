<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Estados y variables de juego
/*
estado "menuInicio" ==&gt; inicio de menu
estado "opciones" ==&gt; Opciones
estado "jugando" ==&gt; Juego en ejecucion
estado "GameOver" ==&gt; Fin de juego
*/

//Variables de juego
global.estado = "menuInicio";
global.gamescore = 0;
global.nivel = 1;
//global.estadonivel ="";

//Variables de nivel
//mostrarNivel = false;
//global.area = 0;

//highscore_add("Puntaje", score);
//highscore_value("score.ini");
//global.hiscore = 0;

//Variables de enemigo red
maxred = 100;
global.energiared = maxred;
global.danored = true;
global.vidasred = 3;

//Variables de enemigo blue
maxblue = 100;
global.energiablue = maxblue;
//global.cantSerpientes = 0;
global.danoblue = true;
global.vidasblue = 3;

//Variables de enemigo green
maxgreen = 100;
global.energiagreen = maxgreen;
//global.cantSerpientes = 0;
global.danogreen = true;
global.vidasgreen = 3;

//Variables de player
posInicialX = 96;
posInicialY = 192;
global.energiaplayer = 200;
global.vidasplayer = 3;
global.danoplayer = true;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Score
//HUD score
    if file_exists("score.ini")
    {
       ini_open("score.ini");
       global.hiscore = ini_read_real("score", "hiscore", 0);
       ini_close();
    }
    else{ global.hiscore = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarma 3--tiempo para mostrar nivel
/*Solo se usa para tener un lapso de tiempo para poder mostrar
el texto de cada nivel*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cambia el nivel
/*Vuelve a cargar las instancias y renueva los contadores de vida*/
global.nivel +=1;
global.estado = "jugando";

global.vidasred = 3;
global.energiared = maxred;

global.vidasblue = 3;
global.energiablue = maxblue;

global.vidasgreen = 3;
global.energiagreen = maxgreen;

instance_create( room_width/2 + 750, room_height/2 - 750, obj_red_snake);
instance_create( room_width/2 - 750, room_height/2 + 750, obj_blue);
instance_create( room_width/2 + 750, room_height/2 + 750, obj_green);
instance_create( posInicialX, posInicialY,obj_player);

//CREAMOS OBJETOS EN POSICION ALEATORIA CUANDO NOS ENCONTREMOS EN EL NIVEL 2
if (global.nivel = 2)
{
repeat(50)
if (place_free( random(room_width), random( room_height)))
{instance_create(random(room_width),random( room_height),obj_asteroide);}
}
//FIN

alarm[3] = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alarma para cambios de da√±o player serpiente
global.danoplayer = true;
obj_player.image_alpha = 1;//elimina transparencia de cabeza de serpiente
obj_body_player.image_alpha = 1;//elimina transparencia de cuerpo de serpiente
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Juego en curso, crea personajes  
if ( instance_number( obj_player)=0)
{
   instance_create( posInicialX, posInicialY,obj_player);
  if ( global.estado = "jugando")
   {
    instance_create( room_width/2 + 750, room_height/2 - 750, obj_red_snake);
    instance_create( room_width/2 - 10, room_height/3-10, obj_triangulo);
    instance_create( room_width/2 - 750, room_height/2 + 750, obj_blue);
    instance_create( room_width/2 + 750, room_height/2 + 750, obj_green);
    if (instance_number( obj_pausa) = 0)
       {instance_create( 64, 64, obj_pausa);}
    
    //repeat (10)
      //{
        //instance_create( x, y, obj_salud );
      //}; 
      //mostrarNivel = false;
   }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control de estados y creacion de alarmas

switch(global.estado)
{
  //Inicio
  case "menuInicio":
    //instance_deactivate_object( obj_muro);
    //instance_deactivate_object( obj_asteroide);
    instance_deactivate_all(true);
    
    if ( keyboard_check( vk_anykey))
      {
      global.estado = "jugando";
      alarm[0] = room_speed * 2;//Esta alarma se encarga de crear los personajes por primera vez
      }
  break;

  //Juego en curso
  case "jugando":
   instance_activate_all();
   instance_deactivate_object( obj_asteroide);
   instance_deactivate_object( obj_muro2);
  break;
  
  //Opciones
  case "opciones":
    //instance_deactivate_all(true);
    //if ( keyboard_check( vk_escape))
      //{
        //global.pausa = false;
        //global.estado = "jugando";
          
      //}
  break;
  

  
  case "GameOver":
      if ( keyboard_check( vk_enter))
      {
      global.estado = "menuInicio";
      room_restart();
      }
      instance_deactivate_all(true);
  break;
  
  case "Ganaste":
      //if ( alarm[2] == -1)
      //{
      //global.estado = "jugando";
      //room_restart();
      //}
      
      instance_deactivate_all(true);
  break;

}  


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control energia y vidas de enemigos

/*suma cantidad total de serpientes*/
global.cantSerpientes = instance_number( obj_red_snake) + instance_number( obj_blue) + instance_number( obj_green);

//CONTROL ENERGIA RED
if (global.vidasred &gt; 0)
{
  if ( global.energiared &lt;= 0)
     {       
       global.vidasred --;//disminuye vidas
       //global.danored = false;
       global.energiared = maxred;//restaura energia
       instance_create( obj_red_snake.x, obj_red_snake.y, obj_medallas);//creamos medallas
       instance_create( obj_red_snake.x, obj_red_snake.y, obj_salud);//creamos corazones           
    }       
}

//CONTROL ENERGIA BLUE
if (global.vidasblue &gt; 0)
{
  if ( global.energiablue &lt;= 0)
     {       
       global.vidasblue --;//disminuye vidas
       //global.danored = false;
       global.energiablue = maxblue;//restaura energia
       instance_create( obj_blue.x, obj_blue.y, obj_medallas);
       instance_create( obj_blue.x, obj_blue.y, obj_salud);
     }
}

//CONTROL ENERGIA GREEN
if (global.vidasgreen &gt; 0)
{
  if ( global.energiagreen &lt;= 0)
     {       
       global.vidasgreen --;//disminuye vidas
       //global.danored = false;
       global.energiagreen = maxgreen;//restaura energia
       instance_create( obj_green.x, obj_green.y, obj_medallas);
       instance_create( obj_green.x, obj_green.y, obj_salud);
     }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control energia y vidas de player 
if (global.vidasplayer &gt; 0)
{
  if ( global.energiaplayer &lt;= 0)
     {       
       global.vidasplayer --;//disminuye vidas
       global.danoplayer = false;
       global.energiaplayer = 200;//restaura energia despues de perder una vida
       alarm[1] = 240;//alarma para volver al estado original
       
       //Random de color alpha para la cabeza cuando energiaplayer llega a cero  
       if (global.danoplayer = false)
          { 
          //PARA LA CABEZA 
            obj_player.image_alpha = random_range( 0.5, 0.9);
             
            if (obj_player.image_alpha &gt;= 0.5)
               { obj_player.image_alpha = random_range( 0.3, 0.5);}
  
            if (obj_player.image_alpha &lt;= 0.5)
               {obj_player.image_alpha = random_range(0.5, 0.9);}
               
           //PARA EL CUERPO    
           obj_body_player.image_alpha = random_range( 0.5, 0.9);
             
           if (obj_body_player.image_alpha &gt;= 0.5)
              {obj_body_player.image_alpha = random_range( 0.3, 0.5);}
  
           if (obj_body_player.image_alpha &lt;= 0.5)
              {obj_body_player.image_alpha = random_range(0.5, 0.9);}             
         }
       
      //Random de color alpha para el cuerpo cuando energiaplayer llega a cero  
      //if (global.danoplayer = false)
         //{  

             
         //}             
    }       
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibuja area de cuadros
//draw_sprite();
//posx = random( room_width);
//posy = random( room_height);

//if ( global.estado = "jugando")
//{
  //if ( instance_number( obj_muro)&lt; 80)
  //{
    //if ( place_empty( posx, posy))
    //{
      //instance_create(posx, posy, obj_muro);
    //}
  //}
//}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Niveles

/*Control de estado --Perdiste √≥ Ganaste--*/
//GANASTE
//Si el n√∫mero de enemigos es cero entonces ganaste y pasas al siguiente nivel
if(( global.estado ="jugando")&amp;&amp;( global.vidasplayer &gt;0) &amp;&amp; ( global.cantSerpientes = 0) &amp;&amp; ( alarm[0] =-1))
{
    //global.estadonivel = "Ganaste";
   global.estado = "Ganaste";
   alarm[2] = 120;
   with( obj_player)
   {instance_destroy();}
}

//PERDISTE
//Si el n√∫mero de vidas de player llega a cero entonces el estado del juego ser√° game over
if ( global.vidasplayer = 0)
{
  obj_player.speed = 0;
  //global.estadonivel = "perdiste";
  global.estado = "GameOver";

  //show_message ("Game Over");
  //room_restart();
}
/*Fin control estado --Perdiste √≥ Ganaste--*/


if ( global.estado = "jugando") &amp;&amp; ( instance_exists( obj_player))//(alarm[0] = -1)
{    
   switch (global.nivel)
    {
        case 1:
        instance_deactivate_object( obj_asteroide);
        instance_deactivate_object( obj_muro2);
        instance_activate_object( obj_muro);
        break;
        
        case 2:
        instance_deactivate_object( obj_muro);
        instance_deactivate_object( obj_asteroide);
        instance_activate_object( obj_muro2);
        break;
        
        case 3:
        instance_deactivate_object( obj_muro);
        instance_deactivate_object( obj_muro2);
        instance_activate_object( obj_asteroide);
        break;
        //if ( global.estado = "jugando")
        //{  
          //instance_create( x, y,obj_player);
          //instance_create( room_width/2 + 750, room_height/2 - 750, obj_red_snake);
          //instance_create( room_width/2 - 750, room_height/2 + 750, obj_blue);
          //instance_create( room_width/2 + 750, room_height/2 + 750, obj_green);        
        //} 
        
        case 4:
        room_goto_next();
        //if ( instance_exists( obj_black))
        //{
        //instance_deactivate_object( obj_red_snake);
        //instance_deactivate_object( obj_blue);
        //instance_deactivate_object( obj_green);
        //}
        //global.estado = "final";

        //global.nivel = 5;
        //alarm[2] = 120;
        //with( obj_player)
        //{instance_destroy();}

   }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prueba desarrollador

if ( keyboard_check_pressed( vk_f1))
{ global.energiaplayer =-1;}

if ( keyboard_check( vk_f2))
{ room_restart();}

if ( keyboard_check( vk_f3))
{global.vidasplayer = 0;}

if ( keyboard_check( vk_f4))
{
global.vidasred = 0;
global.vidasblue = 0;
global.vidasgreen = 0;
}

if ( keyboard_check( vk_f5))
{ room_goto_next();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dibuja textos varios
//display_set_gui_size(1040,880);1540,1080
//display_set_gui_size(1080,860)
draw_set_font( font_jugando);
draw_set_color (c_yellow);
draw_set_halign( fa_center);
draw_set_valign( fa_middle);


switch (global.estado)
{
  case "menuInicio": //estado menu inicio
    draw_set_color (c_white);
         
    //Hi-Score
    draw_text(view_wview[0]/2, view_hview[0]/2 - 400, string_upper("hi-score:  " + string(global.hiscore)));
    
    //Titulo de menu
    draw_set_font( font_logo);
    draw_text_ext_transformed_color(view_wview[0]/2, view_hview[0]/2 - 240, string_upper("&lt;game_code&gt;"),20, 200, 3.5, 2.5, 0, c_yellow, c_yellow, c_orange, c_orange, 1);   
    draw_text(view_wview[0]/2, view_hview[0]/2 - 200, string_upper("presenta"));
    draw_text(view_wview[0]/2, view_hview[0]/2 + 350, string_upper("desarrollado por wilfredo chipana"));
    draw_sprite( spr_title, random(2),view_wview[0]/2 -380, view_wview[0]/3 - 100 );//Imagen de titulo
    
    draw_set_font( font_menu);  
    draw_text(view_wview[0]/2, view_hview[0]/2 + 40, string_upper("Pulse cualquier boton para empezar"));
    
    //peque√±o logo de juego
    draw_text(view_wview[0] - 150, view_hview[0] - 100, string_upper("snake battle"));
    draw_text(view_wview[0] - 150, view_hview[0] - 80, string_upper("2018"));
    //Fin peque√±o logo    
  break;
    
  case "jugando": //estado juego en ejecucion 
  
    draw_text(view_wview[0]/2, view_hview[0]/2 - 380, "Total Serpientes ="  + string(global.cantSerpientes));
    draw_text(view_wview[0]/2, view_hview[0]/2 - 400, "Hi-score :"  + string(global.hiscore));
  
  /*Dibujamos los datos de lo jugadores en las cuatro esquinas*/
    //Datos de player
    draw_text(view_wview[0]/2 - 400, view_hview[0]/2 - 400, "Score :"  + string(global.gamescore));
    draw_sprite( spr_salud, 0,view_wview[0]/2 - 440, view_hview[0]/2 - 370);
    draw_text(view_wview[0]/2 - 400, view_hview[0]/2 - 380, "X"  + string(global.vidasplayer));  
    
    //Datos enemigos
    
    //RED
    draw_text(view_wview[0]/2 + 400, view_hview[0]/2 - 400, string_upper("Snake Red"));
    draw_text(view_wview[0]/2 + 400, view_hview[0]/2 - 380, "Vidas x "  + string(global.vidasred));
    if ( instance_exists( obj_red_snake))
    {
    draw_text( view_wview[0]/2 + 400, view_hview[0]/2 - 360, "Arma  =" + string(obj_red_snake.txt));
    draw_text( view_wview[0]/2 + 400, view_hview[0]/2 - 340, "Velocidad  =" + string(obj_red_snake.velocidad));
    draw_text( view_wview[0]/2 + 400, view_hview[0]/2 - 320, "Energia  =" + string(global.energiared));
    }
    //BLUE
    draw_text(view_wview[0]/2 - 400, view_hview[0]/2 + 320, string_upper("Snake blue"));
    draw_text(view_wview[0]/2 - 400, view_hview[0]/2 + 340, "Vidas x"  + string(global.vidasblue));
    if ( instance_exists( obj_blue))
    {
    draw_text(view_wview[0]/2 - 400, view_hview[0]/2 + 360, "Arma  = "  + string(obj_blue.txt));
    draw_text( view_wview[0]/2 - 400, view_hview[0]/2 + 380, "Velocidad  =" + string(obj_blue.velocidad));
    draw_text( view_wview[0]/2 - 400, view_hview[0]/2 + 400, "Energia  =" + string(global.energiablue));
    }
    //GREEN
    draw_text(view_wview[0]/2 + 400, view_hview[0]/2 + 320, string_upper("Snake green"));
    draw_text(view_wview[0]/2 + 400, view_hview[0]/2 + 340, "Vidas x"  + string(global.vidasgreen));
    if ( instance_exists( obj_green))
    {
    draw_text(view_wview[0]/2 + 400, view_hview[0]/2 + 360, "Arma  = "  + string(obj_green.txt));
    draw_text( view_wview[0]/2 + 400, view_hview[0]/2 + 380, "Velocidad  =" + string(obj_green.velocidad));
    draw_text( view_wview[0]/2 + 400, view_hview[0]/2 + 400, "Energia  =" + string(global.energiagreen));
    }
   /*Fin datos jugadores*/     
  break;
    
  case "opciones": //estado opciones
    //draw_text_ext_transformed_color(view_wview[0]/2, view_hview[0]/2 - 240, string_upper("snake battle"),20, 200, 3.5, 2.5, 0, c_yellow, c_yellow, c_orange, c_orange, 1);   
    //draw_text(view_wview[0]/2, view_hview[0]/2 - 200, string_upper("seleccione opciones"));
    //draw_line_color ( view_wview[0]/2, view_hview[0]/2, view_wview[0]/2, view_hview[0]/2 + 200,c_yellow, c_white );
    //draw_line_color ( view_wview[0]/2, view_hview[0]/2, view_wview[0]/2 + 200, view_hview[0]/2,c_yellow, c_white );  
    //draw_highscore( view_wview[0]/2 - 100 , view_hview[0]/2 -150, view_wview[0]/2 + 100, view_hview[0]/2 + 200);  
    //draw_text(view_wview[0]/2, view_hview[0]/2 - 50, string_upper("presione cualquier boton para empezar"));
  break;
  
  case "GameOver": //estado game over
    draw_rectangle_color( view_wview[0]/2 - 300, view_hview[0]/2 - 300,view_wview[0]/2 + 300, view_hview[0]/2 +300,c_black,c_blue, c_maroon,c_green,0);
    draw_text_ext_transformed_color(view_wview[0]/2, view_hview[0]/2 - 240, string_upper("game over"),20, 200, 3.5, 2.5, 0, c_yellow, c_yellow, c_orange, c_orange, 1);   
    //draw_text(view_wview[0]/2, view_hview[0]/2 - 200, string_upper("game over"));
    //draw_line_color ( view_wview[0]/2, view_hview[0]/2, view_wview[0]/2, view_hview[0]/2 + 200,c_yellow, c_white );
    //draw_line_color ( view_wview[0]/2, view_hview[0]/2, view_wview[0]/2 + 200, view_hview[0]/2,c_yellow, c_white );  
    //draw_highscore( view_wview[0]/2 - 100 , view_hview[0]/2 -150, view_wview[0]/2 + 100, view_hview[0]/2 + 200);
    draw_text(view_wview[0]/2, view_hview[0]/2 - 50, string_upper("tu puntaje es: ") + string(global.gamescore));
    draw_text(view_wview[0]/2, view_hview[0]/2 - 30, string_upper("el mayor puntaje es: ") + string(global.hiscore));  
    draw_text(view_wview[0]/2, view_hview[0]/2 + 45, string_upper("presione enter para volver a intentarlo"));
  break;
  
  case "Ganaste":
    draw_rectangle_color( view_wview[0]/2 - 300, view_hview[0]/2 - 300,view_wview[0]/2 + 300, view_hview[0]/2 +300,c_red,c_black, c_maroon,c_green,0);
    draw_text_ext_transformed_color(view_wview[0]/2, view_hview[0]/2 - 240, string_upper("ganaste"),20, 200, 3.5, 2.5, 0, c_yellow, c_yellow, c_orange, c_orange, 1);   
    draw_text(view_wview[0]/2, view_hview[0]/2 - 50, string_upper("tu puntaje es: ") + string(global.gamescore));
    draw_text(view_wview[0]/2, view_hview[0]/2 - 30, string_upper("el mayor puntaje es: ") + string(global.hiscore));  
    draw_text(view_wview[0]/2, view_hview[0]/2 + 45, string_upper("presione enter para continuar"));
  break;
  

}
 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Muestra nivel
if((alarm[0] &gt; -1) or (alarm[3] != -1))
{
  draw_set_color( c_yellow);
  draw_set_font( font_textNivel);
  //draw_text(view_wview[0]/2, view_hview[0]/2 - 100, string_upper("jugando"));
  draw_text(view_wview[0]/2, view_hview[0]/2 - 50, string_upper("nivel ") + string(global.nivel));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Desarrollador
if( keyboard_check( vk_f10))
{
draw_set_halign( fa_center);
draw_set_color (c_white);
draw_set_font( font_desarrollador);

draw_text(view_wview[0] - 350, view_hview[0] - 210,  "Desarrollador");
draw_text(view_wview[0] - 350, view_hview[0] - 200,  "=============");
draw_text(view_wview[0] - 350, view_hview[0] - 180, "rom_speed = " + string( room_speed));
draw_text(view_wview[0] - 350, view_hview[0] - 170, "alarma 0 =" + string(alarm[0]));
draw_text(view_wview[0] - 350, view_hview[0] - 160, "alarma 1 =" + string(alarm[1]));
draw_text(view_wview[0] - 350, view_hview[0] - 150, "alarma 2 =" + string(alarm[2]));
draw_text(view_wview[0] - 350, view_hview[0] - 140, "alarma 3 =" + string(alarm[3]));
draw_text(view_wview[0] - 350, view_hview[0] - 130, "Estado = " + string(global.estado));
draw_text(view_wview[0] - 350, view_hview[0] - 120, "Nivel = " + string(global.nivel));

if ( instance_exists( obj_player))
{
//draw_text(view_wview[0] - 350, view_hview[0] - 110, "Pausa = " + string(obj_pausa.Pausa));
draw_text(view_wview[0] - 350, view_hview[0] - 90, "Da√±o Player = " + string(global.danoplayer));
draw_text(view_wview[0] - 350, view_hview[0] - 80, "Alpha Player = " + string_format( obj_player.image_alpha, 4, true));
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
