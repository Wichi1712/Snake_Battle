<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_body_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>txtflotante = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///dirección y velocidad del cuerpo

/*Si la cabeza de la serpiente se destruye,
también se destruirá el cuerpo*/
if ( instance_exists( obj_player))
{
     if !collision_point(x,y,padre,true,true)
     {speed = obj_player.speed;}
     else
     {speed = 0;}
   
      move_towards_point(padre.x,padre.y,speed);
      image_angle = point_direction(x,y,padre.x,padre.y);  
}
else
{instance_destroy();}

image_blend = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///probando alejamiento y destruccion de body player
//if ( distance_to_point( x, padre.y)&gt; 100 )
//{ instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_explosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Daño reduce energia
/*Esto para que el player sufra daño siempre
que no este en estado transparente*/
if ( global.danoplayer = true)
 {
   global.energiaplayer -=15;
 }
 
 with(other)
 {instance_destroy();}
 
image_blend = c_red;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///crear punto flotante
//Creación de punto flotante este funciona con obj_puntoflotante
Texto = "-15";
i = instance_create(x,y, obj_puntoflotante);
i.String = string(Texto);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parentMina">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Daño reduce energia
/*Esto para que el player sufra daño siempre
que no este en estado transparente*/

if ( global.danoplayer = true)
 {
   global.energiaplayer -=3;
 }
 
 with(other)
 {instance_destroy();}
 
image_blend = c_red;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///crear punto flotante
//Creación de punto flotante este funciona con obj_puntoflotante
Texto = "-3";
i = instance_create(x,y, obj_puntoflotante);
i.String = string(Texto);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>777060</libid>
        <id>68</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>//Fire
pFX_PS_Fire = part_system_create();
pFX_PT_Fire = part_type_create();
pFX_Emitter_Fire = part_emitter_create(pFX_PS_Fire);

//Smoke
pFX_PS_Smoke = part_system_create();
pFX_PT_Smoke = part_type_create();
pFX_Emitter_Smoke = part_emitter_create(pFX_PS_Smoke);

//Dark Smoke
pFX_PS_Smoke_Dark = part_system_create();
pFX_PT_Smoke_Dark = part_type_create();
pFX_Emitter_Smoke_Dark = part_emitter_create(pFX_PS_Smoke_Dark);

//Explosion
pFX_PS_explosion = part_system_create();
pFX_PT_explosion_smoke = part_type_create();
pFX_PT_explosion_fires = part_type_create();
pFX_PT_explosion_center = part_type_create();

//Blood
pFX_PS_Blood = part_system_create();
pFX_PT_Blood = part_type_create();
pFX_Emitter_Blood = part_emitter_create(pFX_PS_Blood);

//Magical Hit
pFX_PS_Magical01 = part_system_create();
pFX_PT1_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);

pFX_PT2_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);

pFX_PT3_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);


//Bubble
pFX_PS_Bubble = part_system_create();
pFX_PT_Bubble = part_type_create();
pFX_Emitter_Bubble = part_emitter_create(pFX_PS_Bubble);

//Personal
pFX_PS_SpriteReflection = part_system_create();
pFX_PT_SpriteReflection = part_type_create();
pFX_Emitter_SpriteReflection = part_emitter_create(pFX_PS_SpriteReflection);</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>777060</libid>
        <id>28</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>{
globalvar pFX_XXp_Magical01, pFX_YYp_Magical01, pFX_Color1_Magical01, pFX_Color2_Magical01, pFX_Scale_Magical01, pFX_Life_Magical01, pFX_Depth_Magical01, pFX_Blend_Magical01;
pFX_XXp_Magical01 = argument0;
pFX_YYp_Magical01 = argument1;
pFX_Color1_Magical01 = argument2;
pFX_Color2_Magical01 = argument3;
pFX_Scale_Magical01 = argument4;
pFX_Life_Magical01 = argument5;
pFX_Depth_Magical01 = -100000;
pFX_Blend_Magical01 = 1;

//pFX_PS_Magical01 = part_system_create();
part_system_depth(pFX_PS_Magical01, pFX_Depth_Magical01);

//pFX_PT1_Magical01 = part_type_create();
part_type_shape(pFX_PT1_Magical01,pt_shape_sphere);
part_type_size(pFX_PT1_Magical01,0.05,0.05,0,0.10);
part_type_scale(pFX_PT1_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT1_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha3(pFX_PT1_Magical01,0.60,0.40,0);
part_type_speed(pFX_PT1_Magical01,1,1,0,0);
part_type_direction(pFX_PT1_Magical01,0,359,9,0);
part_type_gravity(pFX_PT1_Magical01,0,270);
part_type_orientation(pFX_PT1_Magical01,0,0,10,9,1);
part_type_blend(pFX_PT1_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT1_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT1_Magical01,20);

//pFX_PT2_Magical01 = part_type_create();
part_type_shape(pFX_PT2_Magical01,pt_shape_spark);
part_type_size(pFX_PT2_Magical01,0.20,0.20,0.07,0);
part_type_scale(pFX_PT2_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT2_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha3(pFX_PT2_Magical01,0.80,0.20,0);
part_type_speed(pFX_PT2_Magical01,0,0,0,0);
part_type_direction(pFX_PT2_Magical01,0,0,0,0);
part_type_gravity(pFX_PT2_Magical01,0,270);
part_type_orientation(pFX_PT2_Magical01,0,4,3,8,1);
part_type_blend(pFX_PT2_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT2_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT2_Magical01,2);

//pFX_PT3_Magical01 = part_type_create();
part_type_shape(pFX_PT3_Magical01,pt_shape_sphere);
part_type_size(pFX_PT3_Magical01,0.01,0.07,0,0);
part_type_scale(pFX_PT3_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT3_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha2(pFX_PT3_Magical01,0.70,0);
part_type_speed(pFX_PT3_Magical01,0.50,1.50,0,0);
part_type_direction(pFX_PT3_Magical01,0,359,0,0);
part_type_gravity(pFX_PT3_Magical01,0,270);
part_type_orientation(pFX_PT3_Magical01,0,0,0,0,1);
part_type_blend(pFX_PT3_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT3_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT3_Magical01,100);
}</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>16777162</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>8454143</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parentBomba">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Daño reduce energia
/*Esto para que el player sufra daño siempre
que no este en estado transparente*/

//if ( global.danoplayer = true)
 //{
   //global.energiaplayer -=1;
 //}
 
 //with(other)
 //{instance_destroy();}
 
image_blend = c_red;
//image_blend = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_parentMisil">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Daño reduce energia
/*Esto para que el player sufra daño siempre
que no este en estado transparente*/
if ( global.danoplayer = true)
 {
   global.energiaplayer -=5;
 }
 
 with(other)
 {instance_destroy();}
 
image_blend = c_red;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///crear punto flotante
//Creación de punto flotante este funciona con obj_puntoflotante
Texto = "-5";
i = instance_create(x,y, obj_puntoflotante);
i.String = string(Texto);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>777060</libid>
        <id>68</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>//Fire
pFX_PS_Fire = part_system_create();
pFX_PT_Fire = part_type_create();
pFX_Emitter_Fire = part_emitter_create(pFX_PS_Fire);

//Smoke
pFX_PS_Smoke = part_system_create();
pFX_PT_Smoke = part_type_create();
pFX_Emitter_Smoke = part_emitter_create(pFX_PS_Smoke);

//Dark Smoke
pFX_PS_Smoke_Dark = part_system_create();
pFX_PT_Smoke_Dark = part_type_create();
pFX_Emitter_Smoke_Dark = part_emitter_create(pFX_PS_Smoke_Dark);

//Explosion
pFX_PS_explosion = part_system_create();
pFX_PT_explosion_smoke = part_type_create();
pFX_PT_explosion_fires = part_type_create();
pFX_PT_explosion_center = part_type_create();

//Blood
pFX_PS_Blood = part_system_create();
pFX_PT_Blood = part_type_create();
pFX_Emitter_Blood = part_emitter_create(pFX_PS_Blood);

//Magical Hit
pFX_PS_Magical01 = part_system_create();
pFX_PT1_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);

pFX_PT2_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);

pFX_PT3_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);


//Bubble
pFX_PS_Bubble = part_system_create();
pFX_PT_Bubble = part_type_create();
pFX_Emitter_Bubble = part_emitter_create(pFX_PS_Bubble);

//Personal
pFX_PS_SpriteReflection = part_system_create();
pFX_PT_SpriteReflection = part_type_create();
pFX_Emitter_SpriteReflection = part_emitter_create(pFX_PS_SpriteReflection);</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>777060</libid>
        <id>28</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>{
globalvar pFX_XXp_Magical01, pFX_YYp_Magical01, pFX_Color1_Magical01, pFX_Color2_Magical01, pFX_Scale_Magical01, pFX_Life_Magical01, pFX_Depth_Magical01, pFX_Blend_Magical01;
pFX_XXp_Magical01 = argument0;
pFX_YYp_Magical01 = argument1;
pFX_Color1_Magical01 = argument2;
pFX_Color2_Magical01 = argument3;
pFX_Scale_Magical01 = argument4;
pFX_Life_Magical01 = argument5;
pFX_Depth_Magical01 = -100000;
pFX_Blend_Magical01 = 1;

//pFX_PS_Magical01 = part_system_create();
part_system_depth(pFX_PS_Magical01, pFX_Depth_Magical01);

//pFX_PT1_Magical01 = part_type_create();
part_type_shape(pFX_PT1_Magical01,pt_shape_sphere);
part_type_size(pFX_PT1_Magical01,0.05,0.05,0,0.10);
part_type_scale(pFX_PT1_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT1_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha3(pFX_PT1_Magical01,0.60,0.40,0);
part_type_speed(pFX_PT1_Magical01,1,1,0,0);
part_type_direction(pFX_PT1_Magical01,0,359,9,0);
part_type_gravity(pFX_PT1_Magical01,0,270);
part_type_orientation(pFX_PT1_Magical01,0,0,10,9,1);
part_type_blend(pFX_PT1_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT1_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT1_Magical01,20);

//pFX_PT2_Magical01 = part_type_create();
part_type_shape(pFX_PT2_Magical01,pt_shape_spark);
part_type_size(pFX_PT2_Magical01,0.20,0.20,0.07,0);
part_type_scale(pFX_PT2_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT2_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha3(pFX_PT2_Magical01,0.80,0.20,0);
part_type_speed(pFX_PT2_Magical01,0,0,0,0);
part_type_direction(pFX_PT2_Magical01,0,0,0,0);
part_type_gravity(pFX_PT2_Magical01,0,270);
part_type_orientation(pFX_PT2_Magical01,0,4,3,8,1);
part_type_blend(pFX_PT2_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT2_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT2_Magical01,2);

//pFX_PT3_Magical01 = part_type_create();
part_type_shape(pFX_PT3_Magical01,pt_shape_sphere);
part_type_size(pFX_PT3_Magical01,0.01,0.07,0,0);
part_type_scale(pFX_PT3_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT3_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha2(pFX_PT3_Magical01,0.70,0);
part_type_speed(pFX_PT3_Magical01,0.50,1.50,0,0);
part_type_direction(pFX_PT3_Magical01,0,359,0,0);
part_type_gravity(pFX_PT3_Magical01,0,270);
part_type_orientation(pFX_PT3_Magical01,0,0,0,0,1);
part_type_blend(pFX_PT3_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT3_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT3_Magical01,100);
}</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>16777162</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>8454143</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_balaenemigo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Daño reduce energia
/*Esto para que el player sufra daño siempre
que no este en estado transparente*/
if ( global.danoplayer = true)
 {
   global.energiaplayer -=1;
 }
 
 with(other)
 {instance_destroy();}
 
image_blend = c_red;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///crear punto flotante
//Creación de punto flotante este funciona con obj_puntoflotante
Texto = "-1";
i = instance_create(x,y, obj_puntoflotante);
i.String = string(Texto);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>777060</libid>
        <id>68</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>//Fire
pFX_PS_Fire = part_system_create();
pFX_PT_Fire = part_type_create();
pFX_Emitter_Fire = part_emitter_create(pFX_PS_Fire);

//Smoke
pFX_PS_Smoke = part_system_create();
pFX_PT_Smoke = part_type_create();
pFX_Emitter_Smoke = part_emitter_create(pFX_PS_Smoke);

//Dark Smoke
pFX_PS_Smoke_Dark = part_system_create();
pFX_PT_Smoke_Dark = part_type_create();
pFX_Emitter_Smoke_Dark = part_emitter_create(pFX_PS_Smoke_Dark);

//Explosion
pFX_PS_explosion = part_system_create();
pFX_PT_explosion_smoke = part_type_create();
pFX_PT_explosion_fires = part_type_create();
pFX_PT_explosion_center = part_type_create();

//Blood
pFX_PS_Blood = part_system_create();
pFX_PT_Blood = part_type_create();
pFX_Emitter_Blood = part_emitter_create(pFX_PS_Blood);

//Magical Hit
pFX_PS_Magical01 = part_system_create();
pFX_PT1_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);

pFX_PT2_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);

pFX_PT3_Magical01 = part_type_create();
pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);


//Bubble
pFX_PS_Bubble = part_system_create();
pFX_PT_Bubble = part_type_create();
pFX_Emitter_Bubble = part_emitter_create(pFX_PS_Bubble);

//Personal
pFX_PS_SpriteReflection = part_system_create();
pFX_PT_SpriteReflection = part_type_create();
pFX_Emitter_SpriteReflection = part_emitter_create(pFX_PS_SpriteReflection);</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>777060</libid>
        <id>28</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring>{
globalvar pFX_XXp_Magical01, pFX_YYp_Magical01, pFX_Color1_Magical01, pFX_Color2_Magical01, pFX_Scale_Magical01, pFX_Life_Magical01, pFX_Depth_Magical01, pFX_Blend_Magical01;
pFX_XXp_Magical01 = argument0;
pFX_YYp_Magical01 = argument1;
pFX_Color1_Magical01 = argument2;
pFX_Color2_Magical01 = argument3;
pFX_Scale_Magical01 = argument4;
pFX_Life_Magical01 = argument5;
pFX_Depth_Magical01 = -100000;
pFX_Blend_Magical01 = 1;

//pFX_PS_Magical01 = part_system_create();
part_system_depth(pFX_PS_Magical01, pFX_Depth_Magical01);

//pFX_PT1_Magical01 = part_type_create();
part_type_shape(pFX_PT1_Magical01,pt_shape_sphere);
part_type_size(pFX_PT1_Magical01,0.05,0.05,0,0.10);
part_type_scale(pFX_PT1_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT1_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha3(pFX_PT1_Magical01,0.60,0.40,0);
part_type_speed(pFX_PT1_Magical01,1,1,0,0);
part_type_direction(pFX_PT1_Magical01,0,359,9,0);
part_type_gravity(pFX_PT1_Magical01,0,270);
part_type_orientation(pFX_PT1_Magical01,0,0,10,9,1);
part_type_blend(pFX_PT1_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT1_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT1_Magical01,20);

//pFX_PT2_Magical01 = part_type_create();
part_type_shape(pFX_PT2_Magical01,pt_shape_spark);
part_type_size(pFX_PT2_Magical01,0.20,0.20,0.07,0);
part_type_scale(pFX_PT2_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT2_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha3(pFX_PT2_Magical01,0.80,0.20,0);
part_type_speed(pFX_PT2_Magical01,0,0,0,0);
part_type_direction(pFX_PT2_Magical01,0,0,0,0);
part_type_gravity(pFX_PT2_Magical01,0,270);
part_type_orientation(pFX_PT2_Magical01,0,4,3,8,1);
part_type_blend(pFX_PT2_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT2_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT2_Magical01,2);

//pFX_PT3_Magical01 = part_type_create();
part_type_shape(pFX_PT3_Magical01,pt_shape_sphere);
part_type_size(pFX_PT3_Magical01,0.01,0.07,0,0);
part_type_scale(pFX_PT3_Magical01,pFX_Scale_Magical01,pFX_Scale_Magical01);
part_type_color2(pFX_PT3_Magical01,pFX_Color1_Magical01,pFX_Color2_Magical01);
part_type_alpha2(pFX_PT3_Magical01,0.70,0);
part_type_speed(pFX_PT3_Magical01,0.50,1.50,0,0);
part_type_direction(pFX_PT3_Magical01,0,359,0,0);
part_type_gravity(pFX_PT3_Magical01,0,270);
part_type_orientation(pFX_PT3_Magical01,0,0,0,0,1);
part_type_blend(pFX_PT3_Magical01,pFX_Blend_Magical01);
part_type_life(pFX_PT3_Magical01,pFX_Life_Magical01,pFX_Life_Magical01);

//pFX_Emitter_Magical01 = part_emitter_create(pFX_PS_Magical01);
part_emitter_region(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_XXp_Magical01,pFX_XXp_Magical01,pFX_YYp_Magical01,pFX_YYp_Magical01,0,0);
part_emitter_burst(pFX_PS_Magical01,pFX_Emitter_Magical01,pFX_PT3_Magical01,100);
}</codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>16777162</string>
          </argument>
          <argument>
            <kind>13</kind>
            <string>8454143</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_red_snake">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
txtflotante = true;

//obj_player.hijos-=1;  


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inicia alejamiento de body player
draw_self();//Esto es necesario para que el evento draw se dibuje a si mismo

if ( txtflotante = true)
{
//draw_text( x, y-10, string( y));
//y-=1;//Esto inicia alejamiento de body player

}

//draw_text( x -30, y - 30, "id =" +string(instance_id));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
